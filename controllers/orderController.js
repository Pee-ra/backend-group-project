import Order from "../models/Order.js";
import mongoose from "mongoose";

export const createOrder = async (req, res) => {
  try {
    console.log("req.user =>", req.user); // ‚úÖ debug
    console.log("req.body =>", req.body);

    const newOrder = await Order.create({
      ...req.body,
      user: req.user._id, // üëà ‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤ _id ‡∏à‡∏≤‡∏Å protect
    });

    res.status(201).json({
      success: true,
      message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: newOrder,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: err.message });
  }
};


export const getMyOrders = async (req, res, next) => {
  try {
    const orders = await Order.find({ user: req.user._id, isDeleted: { $ne: true } })
      .select("serviceType totalPrice pickupDetails specialInstructions orderNumber createdAt itemDetails")
      .sort({ createdAt: -1 });

    res.status(200).json({ success: true, orders });
  } catch (err) {
    next(err);
  }
};


// delete my order



export const cancelMyOrder = async (req, res) => {
  try {
    const { id } = req.params;

    // 1) ‡∏ï‡∏£‡∏ß‡∏à id ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡πà‡∏≠‡∏ô (‡∏Å‡∏±‡∏ô CastError)
    if (!mongoose.isValidObjectId(id)) {
      return res.status(400).json({ success: false, message: "Invalid order id" });
    }

    // 2) ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ req.user ‡∏à‡∏≤‡∏Å middleware
    if (!req.user?._id) {
      return res.status(401).json({ success: false, message: "Unauthenticated" });
    }

    // 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á filter ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô query ‡πÄ‡∏•‡∏¢
    const isAdmin = req.user.role === "admin";
    const filter = isAdmin
      ? { _id: id }
      : { _id: id, user: req.user._id }; // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á => match ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠

    // 4) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (soft delete)
    const now = new Date();
    const update = {
      $set: {
        status: "canceled",
        isDeleted: true,
        deletedAt: now, // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡πÉ‡∏ä‡πâ
        deleteAt: now,  // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ schema ‡πÄ‡∏Å‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏™‡∏∞‡∏Å‡∏î deleteAt
      },
    };

    const updated = await Order.findOneAndUpdate(filter, update, {
      new: true,
      strict: false,  // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô schema ‡∏à‡∏∞‡πÑ‡∏°‡πà throw
      projection: "_id user status isDeleted deletedAt deleteAt",
    });

    // 5) ‡πÄ‡∏ä‡πá‡∏Å‡∏ú‡∏•
    if (!updated) {
      // ‡πÑ‡∏°‡πà‡∏û‡∏ö (‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠ id ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠)
      return res.status(404).json({ success: false, message: "Order not found" });
    }

    if (updated.status !== "canceled") {
      // ‡∏Å‡∏±‡∏ô‡πÄ‡∏Ñ‡∏™ edge ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏£‡∏¥‡∏á
      return res.status(500).json({ success: false, message: "Failed to cancel order" });
    }

    return res.json({ success: true, message: "Order canceled" });
  } catch (err) {
    console.error("cancelMyOrder error:", err);
    return res.status(500).json({ success: false, message: err.message || "Server Error" });
  }
};


